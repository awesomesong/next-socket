// schema.prisma 파일 생성
generator client {
  provider = "prisma-client-js"
}

  // provider = "postgresql"
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String   @id @map("_id") @default(cuid())
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  refresh_token_expires_in Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @map("_id")  @default(cuid())
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String    @id @map("_id") @default(auto()) @db.ObjectId
  name            String?
  nickname        String?   
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  profileImage    String?   
  hashedPassword  String?
  role            String?
  provider        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  accounts        Account[]
  sessions        Session[]
  messages        Message[]
  comments        Comment[]
  posts           Post[]
  postComments    PostComment[]
  blogs           Blog[]
  drinkReviews   DrinkReview[]
  messageReadStatus MessageReadStatus[]

  conversationsIds String[]      @db.ObjectId
  conversations   Conversation[] @relation(fields: [conversationsIds], references: [id])

  seenMesssageIds String[]        @db.ObjectId
  seenMesssage    Message[]       @relation("Seen", fields: [seenMesssageIds], references: [id])
}

model Conversation {
  id            String    @id  @map("_id")  @default(auto())  @db.ObjectId
  createdAt     DateTime        @default(now())
  lastMessageAt DateTime        @default(now())
  name          String?
  isGroup       Boolean? 
  isAIChat      Boolean?  @default(false)
  aiAgentType   String?

  messagesIds   String[]   @db.ObjectId
  messages      Message[]

  userIds    String[]    @db.ObjectId
  users      User[]  @relation(fields: [userIds], references: [id])
}

model Message{
  id  String  @id   @map("_id")  @default(auto())  @db.ObjectId
  body String?
  image String?
  createdAt DateTime @default(now())
  type String?
  isAIResponse Boolean? @default(false)
  isError Boolean? @default(false)

  seenId String[]  @db.ObjectId
  seen User[] @relation("Seen", fields: [seenId], references: [id])

  conversationId  String @db.ObjectId
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String   @db.ObjectId
  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)

  readStatuses MessageReadStatus[]
}

model MessageReadStatus {
  id  String  @id   @map("_id")  @default(auto())  @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  messageId String   @db.ObjectId
  message   Message  @relation(fields: [messageId], references: [id])
  isRead    Boolean  @default(false)
}

model VerificationToken {
  id  String  @id   @map("_id")  @default(auto())  @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Blog {
  id  String  @id   @map("_id")  @default(auto())  @db.ObjectId
  title String
  content String
  image String?
  author User? @relation(fields: [authorEmail], references: [email])
  authorEmail String?
  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt
  comments Comment[]
  viewCount Int @default(0) @db.Int
}

model Comment {
  id  String  @id   @map("_id")  @default(auto())  @db.ObjectId
  text String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author User? @relation(fields: [authorEmail], references: [email])
  authorEmail String? 
  blog  Blog? @relation(fields: [blogId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  blogId  String?   @db.ObjectId
}

model Post {
  id  String  @id   @map("_id")  @default(auto())  @db.ObjectId
  title     String
  description String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  category  String
  published Boolean?  @default(true)
  postComments    PostComment[]
  image     String?
  imageName String?
  writer    User  @relation(fields: [writerEmail], references: [email])
  writerEmail String
}

model PostComment {
  id  String  @id   @map("_id")  @default(auto())  @db.ObjectId
  text    String
  postId String? @db.ObjectId
  post   Post? @relation(fields: [postId], references: [id])
  writerEmail String?
  writer    User?  @relation(fields: [writerEmail], references: [email], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model DrinkReview {
  id        String  @id   @map("_id")  @default(auto())  @db.ObjectId
  drinkSlug String
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorEmail String?
  author      User? @relation(fields: [authorEmail], references: [email])
}